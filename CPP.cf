PDefs.   Program ::= [Def] ;

DFun.     Def ::= Type Id "(" [Arg] ")" "{" [Stm] "}" ;
DUsing.   Def ::= "using" Type ";" ;

terminator Def "" ;

ADecl.   Arg    ::= Type Id ;

separator Arg "," ;

SExp.        Stm ::= Exp ";" ;
SDecls.      Stm ::= Type [Id] ";" ;
SInit.       Stm ::= Type Id "=" Exp ";" ;
STypedef.    Stm ::= "typedef" Type Id ";" ;
SReturn.     Stm ::= "return" Exp ";" ;
SReturnVoid. Stm ::= "return" ";" ;
SWhile.      Stm ::= "while" "(" Exp ")" Stm ;
SBlock.      Stm ::= "{" [Stm] "}" ;
SIfElse.     Stm ::= "if" "(" Exp ")" Stm "else" Stm ;
SIf.         Stm ::= "if" "(" Exp ")" Stm ;

terminator Stm "" ;

EChar.   Exp16  ::= Char ;
ETrue.   Exp16  ::= "true" ;
EFalse.  Exp16  ::= "false" ;
EInt.    Exp16  ::= Integer ;
EDouble. Exp16  ::= Double ;
EString. Exp16  ::= [String] ;

separator nonempty String " " ;

EType.   Exp15  ::= [QualifiedId] ;
EApp.    Exp15  ::= Id "(" [Exp] ")" ;
EIndex.  Exp15  ::= Id "[" Exp "]" ;

EPIncr.  Exp14  ::= Exp15 "++" ;
EPDecr.  Exp14  ::= Exp15 "--" ;

EPProp.  Exp14  ::= Exp14 "." Exp15 ;

EIncr.   Exp13  ::= "++" Exp14 ;
EDecr.   Exp13  ::= "--" Exp14 ;

ETimes.  Exp12  ::= Exp12 "*"  Exp13 ;
EDiv.    Exp12  ::= Exp12 "/"  Exp13 ;
EDiv.    Exp12  ::= Exp12 "%"  Exp13 ;

EPlus.   Exp11  ::= Exp11 "+"  Exp12 ;
EMinus.  Exp11  ::= Exp11 "-"  Exp12 ;

ELShift. Exp10  ::= Exp10 "<<" Exp11 ;
ERShift. Exp10  ::= Exp10 ">>" Exp11 ;

ELt.     Exp9   ::= Exp9  "<"  Exp10 ;
EGt.     Exp9   ::= Exp9  ">"  Exp10 ;
ELtEq.   Exp9   ::= Exp9  "<=" Exp10 ;
EGtEq.   Exp9   ::= Exp9  ">=" Exp10 ;

EEq.     Exp8   ::= Exp8  "==" Exp9 ;
ENEq.    Exp8   ::= Exp8  "!=" Exp9 ;

EAnd.    Exp4   ::= Exp4  "&&" Exp5 ;
EOr.     Exp3   ::= Exp3  "||" Exp4 ;
EAss.    Exp2   ::= Exp3 "=" Exp2 ;

ECond.   Exp2   ::= Exp2 "?" Exp3 ":" Exp3 ;

internal ETyped. Exp15 ::= "(" Exp ":" Type ")" ;

coercions Exp 16 ;

separator Exp "," ;

rules TypeBasic   ::= "bool" | "int" | "double" | "void" | "string" ;
 
TypeQualified.  Type ::= QualifiedName ;
QName. QualifiedName ::= [QualifiedId] ;

separator nonempty QualifiedId "::" ;

QIdBase1. QualifiedId ::= Id ;
QIdBase2. QualifiedId ::= TypeBasic ;
QIdBase3. QualifiedId ::= Id "<" [Type] ">" ;

separator nonempty Type "," ;


token Id (letter (letter | digit | '_')*) ;

separator nonempty Id "," ;

comment "#" ;
comment "//" ;
comment "/*" "*/" ;